// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:8000/api';

async function testServer() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...\n');

    try {
        // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        console.log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤...');
        const chatsResponse = await fetch(`${BASE_URL}/chats`);
        const chats = await chatsResponse.json();
        console.log('‚úÖ –ß–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:', chats.length, '—à—Ç.\n');

        // –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        console.log('2. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞...');
        const createResponse = await fetch(`${BASE_URL}/chats`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title: '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç' })
        });
        const newChat = await createResponse.json();
        console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', newChat.chat_id, '\n');

        // –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        console.log('3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
        const messageResponse = await fetch(`${BASE_URL}/chats/${newChat.chat_id}/messages`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                author: 'user',
                body: '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!',
                context: []
            })
        });
        const message = await messageResponse.json();
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', message.id, '\n');

        // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
        console.log('4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞...');
        const messagesResponse = await fetch(`${BASE_URL}/chats/${newChat.chat_id}`);
        const messages = await messagesResponse.json();
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:', messages.length, '—à—Ç.\n');

        // –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤
        console.log('5. –ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤...');
        const searchResponse = await fetch(`${BASE_URL}/search?search=—Ç–µ—Å—Ç&mode=ai`);
        const searchResults = await searchResponse.json();
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤:', searchResults.length, '—à—Ç.\n');

        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    testServer();
}
