import { v4 as uuidv4 } from 'uuid';

export function setupWebSocket(wss, chatStorage) {
    console.log('üîå WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

    wss.on('connection', (ws, req) => {
        console.log('üë§ –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        ws.send(JSON.stringify({
            status: 'connected',
            message: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        }));

        ws.on('message', async (data) => {
            try {
                const message = JSON.parse(data.toString());
                console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if (!message.message) {
                    ws.send(JSON.stringify({
                        status: 'error',
                        detail: '–ü–æ–ª–µ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
                    }));
                    return;
                }

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await handleNewMessage(ws, message, chatStorage);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                ws.send(JSON.stringify({
                    status: 'error',
                    detail: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
                }));
            }
        });

        ws.on('close', () => {
            console.log('üëã WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        });

        ws.on('error', (error) => {
            console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleNewMessage(ws, message, chatStorage) {
    const { chat_id, message: userMessage, context = [] } = message;

    if (!userMessage) {
        ws.send(JSON.stringify({
            status: 'error',
            detail: '–ü–æ–ª–µ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
        }));
        return;
    }

    try {
        let currentChatId = chat_id;

        // –ï—Å–ª–∏ chat_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        if (!currentChatId) {
            const newChat = chatStorage.createChat('–ù–æ–≤—ã–π —á–∞—Ç');
            currentChatId = newChat.chat_id;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
            ws.send(JSON.stringify({
                status: 'chat_created',
                chat_id: currentChatId
            }));
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            const existingChat = chatStorage.getChat(currentChatId);
            if (!existingChat) {
                ws.send(JSON.stringify({
                    status: 'error',
                    detail: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }));
                return;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chatStorage.addMessage(currentChatId, 'user', userMessage, context);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        ws.send(JSON.stringify({
            status: 'processing',
            chat_id: currentChatId
        }));

        // –ò–º–∏—Ç–∏—Ä—É–µ–º —ç—Ö–æ-–æ—Ç–≤–µ—Ç —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π
        console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', userMessage);

        await streamEchoResponse(ws, currentChatId, userMessage, chatStorage);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        ws.send(JSON.stringify({
            status: 'error',
            detail: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
        }));
    }
}



// –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ —ç—Ö–æ-–æ—Ç–≤–µ—Ç–∞
async function streamEchoResponse(ws, chatId, userMessage, chatStorage) {
    const echoMessage = `–≠—Ö–æ: ${userMessage}`;
    const chunks = splitIntoChunks(echoMessage, 3); // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 3 —Å–∏–º–≤–æ–ª–∞

    let fullResponse = '';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (let i = 0; i < chunks.length; i++) {
        const chunk = chunks[i];
        fullResponse += chunk;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫
        ws.send(JSON.stringify({
            status: 'stream',
            chat_id: chatId,
            chunk: chunk
        }));

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    ws.send(JSON.stringify({
        status: 'answer',
        chat_id: chatId,
        answer: fullResponse,
        contexts: []
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —á–∞—Ç
    try {
        chatStorage.addMessage(chatId, 'assistant', fullResponse, []);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error);
    }
}

// –†–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —á–∞–Ω–∫–∏
function splitIntoChunks(str, chunkSize) {
    const chunks = [];
    for (let i = 0; i < str.length; i += chunkSize) {
        chunks.push(str.slice(i, i + chunkSize));
    }
    return chunks;
}
